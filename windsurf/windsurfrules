# This project
- framework: python
- build_command: pip install -r requirements.txt

# Comments
- Prepend functions with comments
- Prepend classes with comments
- Prepend modules with comments
- Use comments to explain the logic of the code
- Write timestamp together with -JS at end of comment for when it was added

# Incorperate logging
- log through one function log((self, level, *messages, **kwargs))
- log INFO level to console unless --quiet or --debug is specified
- Use logging framework
- DEBUG: Detailed information, typically useful for debugging purposes.
- INFO: General information about the execution of the application.
- WARNING: An indication that something unexpected or potentially problematic has occurred, but the application can still continue running.
- ERROR: An error has occurred that might prevent the application from continuing to execute.
- CRITICAL: A critical error has occurred that will likely cause the application to terminate.

# Communication in chat
- Please write precise and short messages
- Preferably show code rather than describing the code in text

# Testing Requirements
- Use pytest for testing
- unittest (Python's built-in testing framework)
- unittest.mock (Python's built-in mocking library)
- Follow test-driven development (TDD) practices
- Create failing tests before implementing features
- Do not create tests that require sudo to run, try to find a way around it.
- Ensure all tests pass with run_tests.py before considering a feature complete
- Use a data-driven approach for organization subnet discovery instead of hardcoding values
- Static files are also considered hardcoded and should be considerd a last resort
- Do not hardcode values

# Use of version controll
- Use git for version control
- Try to commit after every change
- Make sure all tests pass before committing
- Clean out temporary files you created
- Clean out files that are no longer needed
- Use meaningful commit messages
- Push changes to remote repository

# Documentation
- Always maintain README.md
- Always update CHANGELOG.md

# Command Line Behavior
- Provide clear error messages when invalid arguments are provided
- Use argparse for command line arguments
- Use --quiet and --debug parameters

